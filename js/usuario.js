// console.log("SCRIPT")
// document.addEventListener('DOMContentLoaded', async function() {
//     console.log("cheguei")
//     const userId = 1; // Substitua pelo ID do usu√°rio que voc√™ deseja buscar
//     const response = await fetch(`http://localhost:3000/user-info?userId=${userId}`, {
//     method: 'GET',
//     headers: {
//         'Content-Type': 'application/json'
//     }
//     }).then(response => response.json())
//         .then(data => {
//             document.getElementById('user-name').value = data.nome;
//             document.getElementById('user-email').value = data.email;
//             document.getElementById('user-tel').value = data.tel;
//             document.getElementById('user-password').value = data.password;
//             document.getElementById('user-sector').value = data.setor;
//         })
//         .catch(error => console.error('Erro ao buscar informa√ß√µes do usu√°rio:', error));
//     const data = await response.json();

  
    
// });

//     document.getElementById('update-user').addEventListener('click', function() {
//         const nome = document.getElementById('user-name').value;
//         const email = document.getElementById('user-email').value;
//         const tel = document.getElementById('user-tel').value;
//         const senha = document.getElementById('user-password').value;
//         const setor = document.getElementById('user-sector').value;

//         fetch('/update-user', {
//             method: 'POST',
//             headers: {
//                 'Content-Type': 'application/json'
//             },
//             body: JSON.stringify({ nome, email, tel, senha, setor })
//         })
//         .then(response => response.json())
//         .then(data => {
//             alert('Usu√°rio atualizado com sucesso!');
//         })
//         .catch(error => console.error('Erro ao atualizar usu√°rio:', error));
//     });

//     document.getElementById('delete-user').addEventListener('click', function() {
//         const email = document.getElementById('user-email').value;

//         fetch('/delete-user', {
//             method: 'POST',
//             headers: {
//                 'Content-Type': 'application/json'
//             },
//             body: JSON.stringify({ email })
//         })
//         .then(response => response.json())
//         .then(data => {
//             alert('Usu√°rio exclu√≠do com sucesso!');
//         })
//         .catch(error => console.error('Erro ao excluir usu√°rio:', error));
//     });

console.log('üîç Arquivo usuario.js carregado');

document.addEventListener('DOMContentLoaded', async function() {
  console.log('üöÄ DOMContentLoaded - Iniciando carregamento de dados do usu√°rio');
  
  // Verifica se o usu√°rio est√° logado
  const token = localStorage.getItem('token');
  console.log('üîë Token encontrado:', token ? 'Sim' : 'N√£o');
  
  if (!token) {
    console.log('‚ö†Ô∏è Token n√£o encontrado, redirecionando para login');
    window.location.href = 'login.html'; // Redireciona para login se n√£o estiver autenticado
    return;
  }
  
  const userId = localStorage.getItem('userId');
  console.log('üë§ ID do usu√°rio:', userId);
  
  try {
    console.log('üîÑ Iniciando requisi√ß√£o para obter dados do usu√°rio');
    const response = await fetch(`http://localhost:3000/user-info?userId=${userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}` // Adiciona o token ao cabe√ßalho
      }
    });
    
    console.log('üìä Status da resposta:', response.status);
    
    if (!response.ok) {
      console.error('‚ùå Resposta n√£o ok:', response.status, response.statusText);
      throw new Error('Falha ao buscar informa√ß√µes do usu√°rio');
    }
    
    const data = await response.json();
    console.log('üìã Dados recebidos:', data);
    
    // Preenche os campos do formul√°rio com as informa√ß√µes do usu√°rio
    document.getElementById('user-name').value = data.nome;
    document.getElementById('user-email').value = data.email;
    document.getElementById('user-tel').value = data.tel || '';
    document.getElementById('user-password').value = ''; // Por seguran√ßa, n√£o exibimos a senha
    document.getElementById('user-sector').value = data.setor || '';
    
    console.log('‚úÖ Campos do formul√°rio preenchidos com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao carregar dados:', error);
    alert('Erro ao carregar informa√ß√µes do usu√°rio. Por favor, fa√ßa login novamente.');
    localStorage.clear();
    window.location.href = 'login.html';
  }
});

// Fun√ß√£o para atualizar usu√°rio
document.addEventListener('DOMContentLoaded', function() {
  console.log('üîÑ Configurando eventos para atualiza√ß√£o de usu√°rio');
  
  const updateForm = document.getElementById('update-user-form');
  console.log('üìù Formul√°rio de atualiza√ß√£o encontrado:', updateForm ? 'Sim' : 'N√£o');
  
  if (updateForm) {
    updateForm.addEventListener('submit', async function(event) {
      console.log('üîÑ Evento de submit do formul√°rio acionado');
      event.preventDefault(); // Previne o envio padr√£o do formul√°rio
      console.log('üõë Comportamento padr√£o do formul√°rio prevenido');
      
      const token = localStorage.getItem('token');
      console.log('üîë Token para atualiza√ß√£o:', token ? 'Dispon√≠vel' : 'Indispon√≠vel');
      
      if (!token) {
        console.warn('‚ö†Ô∏è Token n√£o encontrado para atualiza√ß√£o');
        alert('Sess√£o expirada. Por favor, fa√ßa login novamente.');
        window.location.href = 'login.html';
        return;
      }
      
      const userId = localStorage.getItem('userId'); // Obt√©m o ID do usu√°rio logado
      const nome = document.getElementById('user-name').value;
      const email = document.getElementById('user-email').value;
      const tel = document.getElementById('user-tel').value;
      const senha = document.getElementById('user-password').value;
      const setor = document.getElementById('user-sector').value;

      console.log('üìã Dados para atualiza√ß√£o coletados:', { userId, nome, email, setor, tel, senha: senha ? '****' : 'n√£o fornecida' });

      try {
        console.log('üîÑ Iniciando requisi√ß√£o para atualizar usu√°rio');
        
        // Verificando se o userId no token corresponde ao userId no localStorage
        const decodedToken = JSON.parse(atob(token.split('.')[1]));
        console.log('üîë ID do usu√°rio no token:', decodedToken.id);
        console.log('üîë ID do usu√°rio no localStorage:', userId);
        
        if (decodedToken.id != userId) {
          console.error('‚ùå IDs n√£o correspondem. Token ID:', decodedToken.id, 'localStorage ID:', userId);
          throw new Error('ID do usu√°rio no token n√£o corresponde ao ID armazenado localmente');
        }
        
        const response = await fetch('http://localhost:3000/update-user', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ userId: decodedToken.id, nome, email, setor, senha, tel }) // Usa o ID do token
        });
        
        console.log('üìä Status da resposta de atualiza√ß√£o:', response.status);
        
        // Primeiro verifica se a resposta est√° ok antes de tentar converter para JSON
        if (!response.ok) {
          console.error('‚ùå Resposta de atualiza√ß√£o n√£o ok:', response.status, response.statusText);
          const errorData = await response.json().catch(() => {
            console.error('‚ùå Erro ao processar resposta JSON');
            return { message: 'Erro de conex√£o com o servidor' };
          });
          throw new Error(errorData.message || 'Falha ao atualizar usu√°rio');
        }
        
        const responseData = await response.json();
        console.log('‚úÖ Resposta do servidor ap√≥s atualiza√ß√£o:', responseData);
        alert('Usu√°rio atualizado com sucesso!');
      } catch (error) {
        console.error('‚ùå Erro durante atualiza√ß√£o:', error);
        alert(`Erro ao atualizar usu√°rio: ${error.message || 'Verifique se o servidor est√° rodando na porta 3000'}`);
      }
    });
    
    console.log('‚úÖ Evento de submit configurado com sucesso');
  }

  // Adicionar evento de clique diretamente ao bot√£o de atualizar
  const updateButton = document.getElementById('update-user');
  console.log('üîò Bot√£o de atualizar encontrado:', updateButton ? 'Sim' : 'N√£o');
  
  if (updateButton) {
    updateButton.addEventListener('click', function(event) {
      console.log('üñ±Ô∏è Bot√£o de atualizar clicado');
      // O formul√°rio j√° tem um evento de submit, ent√£o este evento serve apenas para garantir que o bot√£o est√° respondendo
      console.log('‚ÑπÔ∏è Este clique deve acionar o evento de submit do formul√°rio');
    });
    
    console.log('‚úÖ Evento de clique no bot√£o de atualizar configurado');
  }
});

// Implementa√ß√£o para excluir usu√°rio
document.addEventListener('DOMContentLoaded', function() {
  console.log('üîÑ Configurando evento para exclus√£o de usu√°rio');
  
  const deleteButton = document.getElementById('delete-user');
  console.log('üîò Bot√£o de excluir encontrado:', deleteButton ? 'Sim' : 'N√£o');
  
  if (deleteButton) {
    deleteButton.addEventListener('click', async function() {
      console.log('üñ±Ô∏è Bot√£o de excluir clicado');
      
      const token = localStorage.getItem('token');
      console.log('üîë Token para exclus√£o:', token ? 'Dispon√≠vel' : 'Indispon√≠vel');
      
      if (!token) {
        console.warn('‚ö†Ô∏è Token n√£o encontrado para exclus√£o');
        alert('Sess√£o expirada. Por favor, fa√ßa login novamente.');
        window.location.href = 'login.html';
        return;
      }

      // Confirma√ß√£o antes de excluir
      console.log('‚ùì Solicitando confirma√ß√£o do usu√°rio');
      if (!confirm('Tem certeza que deseja excluir sua conta? Esta a√ß√£o n√£o pode ser desfeita.')) {
        console.log('üõë Exclus√£o cancelada pelo usu√°rio');
        return;
      }

      const email = document.getElementById('user-email').value;
      console.log('üìß Email para exclus√£o:', email);

      try {
        console.log('üîÑ Iniciando requisi√ß√£o para excluir usu√°rio');
        
        // Verificando se o email no token corresponde ao email do formul√°rio
        const decodedToken = JSON.parse(atob(token.split('.')[1]));
        console.log('üîë Email do usu√°rio no token:', decodedToken.email);
        console.log('üîë Email do formul√°rio:', email);
        
        if (decodedToken.email !== email) {
          console.error('‚ùå Emails n√£o correspondem. Token email:', decodedToken.email, 'Formul√°rio email:', email);
          throw new Error('Email do usu√°rio no token n√£o corresponde ao email do formul√°rio');
        }
        
        const response = await fetch('http://localhost:3000/delete-user', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ email: decodedToken.email }) // Usa o email do token
        });
        
        console.log('üìä Status da resposta de exclus√£o:', response.status);
        
        // Verifica se a resposta est√° ok antes de tentar converter para JSON
        if (!response.ok) {
          console.error('‚ùå Resposta de exclus√£o n√£o ok:', response.status, response.statusText);
          const errorData = await response.json().catch(() => {
            console.error('‚ùå Erro ao processar resposta JSON');
            return { message: 'Erro de conex√£o com o servidor' };
          });
          throw new Error(errorData.message || 'Falha ao excluir usu√°rio');
        }
        
        console.log('‚úÖ Usu√°rio exclu√≠do com sucesso');
        alert('Usu√°rio exclu√≠do com sucesso!');
        // Limpa o localStorage e redireciona para a p√°gina de login
        localStorage.clear();
        window.location.href = 'login.html';
      } catch (error) {
        console.error('‚ùå Erro durante exclus√£o:', error);
        alert(`Erro ao excluir usu√°rio: ${error.message || 'Verifique se o servidor est√° rodando na porta 3000'}`);
      }
    });
    
    console.log('‚úÖ Evento de clique no bot√£o de excluir configurado');
  }
});